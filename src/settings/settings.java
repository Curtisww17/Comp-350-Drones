package settings;

import cli.PlacedOrder;
import menu.DefaultFood;
import menu.Destination;
import menu.FoodItem;
import menu.Meal;
import org.w3c.dom.ranges.Range;

import java.io.*;
import java.util.*;


/**
 * verify submenus
 * import and export sim settings file
 */
public class settings {

    private ArrayList<Destination> map;
    private Set<FoodItem> foods;
    private List<Meal> meals;
    private File settingsFile;


    private static settings single_instance = null;

    private settings(){
        map = new ArrayList<>();
        foods = new HashSet<>();
        meals = new ArrayList<>();

        // names = new ArrayList<>();
        try {
            //Names.txt was generated by Dominic Tarr
            settingsFile = new File("settings.txt"); //open the names file
            Scanner s = new Scanner(settingsFile);

            //For each line in the file
            while (s.hasNextLine()) {
                Scanner line = new Scanner(s.nextLine()); //Scanner for the given line

                if(line.next().equals("<d>")) {
                    String name;
                    int x, y;
                    double dist;

                    //Get the attributes from the file
                    name = line.next();
                    x = line.nextInt();
                    y = line.nextInt();
                    dist = line.nextDouble();

                    //Create a new destination
                    map.add(new Destination(name, x, y, dist));
                } else if(line.next().equals("<f>")){
                    String name;
                    float weight;

                    //Get the attributes from the file
                    name = line.next();
                    weight = line.nextInt();

                    //Create a new food item
                    foods.add(new FoodItem(name, weight));
                } else if(line.next().equals("<m>")){
                    String name;
                    int id;
                    float distribution;

                    //gets the attributes from the file
                    name = line.next();
                    id = line.nextInt();
                    distribution = line.nextFloat();

                    //creates a meal item
                    Meal combo = new Meal(name, id);
                    combo.setDistribution(distribution);
                    while(line.hasNext()){
                        String food = line.next();
                        int quantity = line.nextInt();

                        //finds food so it can add it to the combo
                        for (Iterator<FoodItem> it = foods.iterator(); it.hasNext(); ) {
                            FoodItem f = it.next();
                            if (f.getName().equals(food))
                                combo.addFoodItem(f, quantity);
                        }
                    }
                    meals.add(combo);
                }

                line.close();
                }
            //s.close();
            s.close();
            } catch (Exception e) {
        System.out.println((e.getMessage()));
    }

            //Seed the arraylist with names in the file
            /*Scanner s = new Scanner(settingsFile);
            while(s.hasNext()) {
                String next = s.nextLine();
                if(next.contains("<d>")) {
                    //next.substring(next.indexOf(" "),next.length());
                    //Destinations.add();
                    String name;
                    int x, y;
                    double dist;


                }
            }
            s.close();*/


    }
    //Singleton creator
    public static settings getInstance() {
        if (single_instance == null) {
            single_instance = new settings();
        }
        return single_instance;
    }

    //definitely not right
    public File exportSimSettings(){
        return settingsFile;
    }

    public void importSimSettings(File userInput){
        boolean validFile=true;
        try {
            Scanner s = new Scanner(userInput);
            while(s.hasNextLine()){
                Scanner line = new Scanner(s.nextLine());
                if(line.next().equals("<d>")) {
                    if(!line.hasNext()){
                        validFile = false;
                    }
                    line.next();
                    if(!line.hasNextInt()){
                        validFile = false;
                    }
                    line.next();
                    if(!line.hasNextInt()){
                        validFile = false;
                    }
                    line.next();
                    if(!line.hasNextDouble()){
                        validFile = false;
                    }
                    line.next();
                    if(line.hasNext()){
                        validFile = false;
                    }
                } else if(line.next().equals("<f>")) {
                    if(!line.hasNext()){
                        validFile = false;
                    }
                    line.next();
                    if(!line.hasNextInt()){
                        validFile = false;
                    }
                    line.next();
                    if(line.hasNext()){
                        validFile = false;
                    }
                } else if(line.next().equals("<m>")) {
                    if(!line.hasNext()){
                        validFile = false;
                    }
                    line.next();
                    if(!line.hasNextInt()){
                        validFile = false;
                    }
                    line.next();
                    if(!line.hasNextFloat()){
                        validFile = false;
                    }
                    line.next();
                    while(line.hasNext()) {
                        line.next();
                        if(!line.hasNextInt()){
                            validFile=false;
                        }
                        line.next();
                    }
                } else{
                    validFile = false;
                    break;
                }
            }
            if(validFile){
                settingsFile = userInput;
            }else{
                System.err.println("FILE INCORECTLY FORMATTED");
            }
            s.close();
        } catch (Exception e) {
            System.out.println((e.getMessage()));
        }
    }

    public void addMapPoint(int x, int y, float dist){

    }

    public void removeMapPoint(int x, int y){

    }

    public void editMapPoint(int x, int y, float dist){

    }

    public void exportMap(){

    }

    public void importMap(){

    }

    public boolean verifyMap(){

        return false;
    }

}
